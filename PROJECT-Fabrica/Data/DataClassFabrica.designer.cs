#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PROJECT_Fabrica.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FABRICA")]
	public partial class DataClassFabricaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdministrativo(Administrativo instance);
    partial void UpdateAdministrativo(Administrativo instance);
    partial void DeleteAdministrativo(Administrativo instance);
    partial void InsertTrabajador(Trabajador instance);
    partial void UpdateTrabajador(Trabajador instance);
    partial void DeleteTrabajador(Trabajador instance);
    partial void InsertAlmacen(Almacen instance);
    partial void UpdateAlmacen(Almacen instance);
    partial void DeleteAlmacen(Almacen instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertDepartamento(Departamento instance);
    partial void UpdateDepartamento(Departamento instance);
    partial void DeleteDepartamento(Departamento instance);
    partial void InsertDetalleHist(DetalleHist instance);
    partial void UpdateDetalleHist(DetalleHist instance);
    partial void DeleteDetalleHist(DetalleHist instance);
    partial void InsertDetalleReferencia(DetalleReferencia instance);
    partial void UpdateDetalleReferencia(DetalleReferencia instance);
    partial void DeleteDetalleReferencia(DetalleReferencia instance);
    partial void InsertHistorico(Historico instance);
    partial void UpdateHistorico(Historico instance);
    partial void DeleteHistorico(Historico instance);
    partial void InsertLote(Lote instance);
    partial void UpdateLote(Lote instance);
    partial void DeleteLote(Lote instance);
    partial void InsertReferencia(Referencia instance);
    partial void UpdateReferencia(Referencia instance);
    partial void DeleteReferencia(Referencia instance);
    partial void InsertRol(Rol instance);
    partial void UpdateRol(Rol instance);
    partial void DeleteRol(Rol instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertTipoAdmin(TipoAdmin instance);
    partial void UpdateTipoAdmin(TipoAdmin instance);
    partial void DeleteTipoAdmin(TipoAdmin instance);
    #endregion
		
		public DataClassFabricaDataContext() : 
				base(global::PROJECT_Fabrica.Properties.Settings.Default.FABRICAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassFabricaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassFabricaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassFabricaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassFabricaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administrativo> Administrativos
		{
			get
			{
				return this.GetTable<Administrativo>();
			}
		}
		
		public System.Data.Linq.Table<Trabajador> Trabajadors
		{
			get
			{
				return this.GetTable<Trabajador>();
			}
		}
		
		public System.Data.Linq.Table<Almacen> Almacens
		{
			get
			{
				return this.GetTable<Almacen>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<Departamento> Departamentos
		{
			get
			{
				return this.GetTable<Departamento>();
			}
		}
		
		public System.Data.Linq.Table<DetalleHist> DetalleHists
		{
			get
			{
				return this.GetTable<DetalleHist>();
			}
		}
		
		public System.Data.Linq.Table<DetalleReferencia> DetalleReferencias
		{
			get
			{
				return this.GetTable<DetalleReferencia>();
			}
		}
		
		public System.Data.Linq.Table<Historico> Historicos
		{
			get
			{
				return this.GetTable<Historico>();
			}
		}
		
		public System.Data.Linq.Table<Lote> Lotes
		{
			get
			{
				return this.GetTable<Lote>();
			}
		}
		
		public System.Data.Linq.Table<Referencia> Referencias
		{
			get
			{
				return this.GetTable<Referencia>();
			}
		}
		
		public System.Data.Linq.Table<Rol> Rols
		{
			get
			{
				return this.GetTable<Rol>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<TipoAdmin> TipoAdmins
		{
			get
			{
				return this.GetTable<TipoAdmin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrativo")]
	public partial class Administrativo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Admin;
		
		private string _usuario;
		
		private string _contrasena;
		
		private System.Nullable<int> _ID_TipoAdmin;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<Trabajador> _Trabajadors;
		
		private EntityRef<TipoAdmin> _TipoAdmin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AdminChanging(int value);
    partial void OnID_AdminChanged();
    partial void OnusuarioChanging(string value);
    partial void OnusuarioChanged();
    partial void OncontrasenaChanging(string value);
    partial void OncontrasenaChanged();
    partial void OnID_TipoAdminChanging(System.Nullable<int> value);
    partial void OnID_TipoAdminChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Administrativo()
		{
			this._Trabajadors = new EntitySet<Trabajador>(new Action<Trabajador>(this.attach_Trabajadors), new Action<Trabajador>(this.detach_Trabajadors));
			this._TipoAdmin = default(EntityRef<TipoAdmin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Admin", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Admin
		{
			get
			{
				return this._ID_Admin;
			}
			set
			{
				if ((this._ID_Admin != value))
				{
					this.OnID_AdminChanging(value);
					this.SendPropertyChanging();
					this._ID_Admin = value;
					this.SendPropertyChanged("ID_Admin");
					this.OnID_AdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usuario", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string usuario
		{
			get
			{
				return this._usuario;
			}
			set
			{
				if ((this._usuario != value))
				{
					this.OnusuarioChanging(value);
					this.SendPropertyChanging();
					this._usuario = value;
					this.SendPropertyChanged("usuario");
					this.OnusuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contrasena", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string contrasena
		{
			get
			{
				return this._contrasena;
			}
			set
			{
				if ((this._contrasena != value))
				{
					this.OncontrasenaChanging(value);
					this.SendPropertyChanging();
					this._contrasena = value;
					this.SendPropertyChanged("contrasena");
					this.OncontrasenaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TipoAdmin", DbType="Int")]
		public System.Nullable<int> ID_TipoAdmin
		{
			get
			{
				return this._ID_TipoAdmin;
			}
			set
			{
				if ((this._ID_TipoAdmin != value))
				{
					if (this._TipoAdmin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TipoAdminChanging(value);
					this.SendPropertyChanging();
					this._ID_TipoAdmin = value;
					this.SendPropertyChanged("ID_TipoAdmin");
					this.OnID_TipoAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrativo_Trabajador", Storage="_Trabajadors", ThisKey="ID_Admin", OtherKey="ID_Admin")]
		public EntitySet<Trabajador> Trabajadors
		{
			get
			{
				return this._Trabajadors;
			}
			set
			{
				this._Trabajadors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoAdmin_Administrativo", Storage="_TipoAdmin", ThisKey="ID_TipoAdmin", OtherKey="ID_TipoAdmin", IsForeignKey=true)]
		public TipoAdmin TipoAdmin
		{
			get
			{
				return this._TipoAdmin.Entity;
			}
			set
			{
				TipoAdmin previousValue = this._TipoAdmin.Entity;
				if (((previousValue != value) 
							|| (this._TipoAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoAdmin.Entity = null;
						previousValue.Administrativos.Remove(this);
					}
					this._TipoAdmin.Entity = value;
					if ((value != null))
					{
						value.Administrativos.Add(this);
						this._ID_TipoAdmin = value.ID_TipoAdmin;
					}
					else
					{
						this._ID_TipoAdmin = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoAdmin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Administrativo = this;
		}
		
		private void detach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Administrativo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trabajador")]
	public partial class Trabajador : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Trabajador;
		
		private string _nombre;
		
		private string _apellido;
		
		private string _cedula;
		
		private string _telefono;
		
		private string _codigo;
		
		private System.Nullable<bool> _IsDeleted;
		
		private string _permiso;
		
		private System.Nullable<int> _Rol;
		
		private System.Nullable<int> _ID_Departamento;
		
		private System.Nullable<int> _ID_Admin;
		
		private EntitySet<Historico> _Historicos;
		
		private EntitySet<Lote> _Lotes;
		
		private EntitySet<Referencia> _Referencias;
		
		private EntityRef<Administrativo> _Administrativo;
		
		private EntityRef<Departamento> _Departamento;
		
		private EntityRef<Rol> _Rol1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TrabajadorChanging(int value);
    partial void OnID_TrabajadorChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void OnapellidoChanging(string value);
    partial void OnapellidoChanged();
    partial void OncedulaChanging(string value);
    partial void OncedulaChanged();
    partial void OntelefonoChanging(string value);
    partial void OntelefonoChanged();
    partial void OncodigoChanging(string value);
    partial void OncodigoChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnpermisoChanging(string value);
    partial void OnpermisoChanged();
    partial void OnRolChanging(System.Nullable<int> value);
    partial void OnRolChanged();
    partial void OnID_DepartamentoChanging(System.Nullable<int> value);
    partial void OnID_DepartamentoChanged();
    partial void OnID_AdminChanging(System.Nullable<int> value);
    partial void OnID_AdminChanged();
    #endregion
		
		public Trabajador()
		{
			this._Historicos = new EntitySet<Historico>(new Action<Historico>(this.attach_Historicos), new Action<Historico>(this.detach_Historicos));
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Referencias = new EntitySet<Referencia>(new Action<Referencia>(this.attach_Referencias), new Action<Referencia>(this.detach_Referencias));
			this._Administrativo = default(EntityRef<Administrativo>);
			this._Departamento = default(EntityRef<Departamento>);
			this._Rol1 = default(EntityRef<Rol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Trabajador", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Trabajador
		{
			get
			{
				return this._ID_Trabajador;
			}
			set
			{
				if ((this._ID_Trabajador != value))
				{
					this.OnID_TrabajadorChanging(value);
					this.SendPropertyChanging();
					this._ID_Trabajador = value;
					this.SendPropertyChanged("ID_Trabajador");
					this.OnID_TrabajadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apellido", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string apellido
		{
			get
			{
				return this._apellido;
			}
			set
			{
				if ((this._apellido != value))
				{
					this.OnapellidoChanging(value);
					this.SendPropertyChanging();
					this._apellido = value;
					this.SendPropertyChanged("apellido");
					this.OnapellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cedula", DbType="VarChar(13) NOT NULL", CanBeNull=false)]
		public string cedula
		{
			get
			{
				return this._cedula;
			}
			set
			{
				if ((this._cedula != value))
				{
					this.OncedulaChanging(value);
					this.SendPropertyChanging();
					this._cedula = value;
					this.SendPropertyChanged("cedula");
					this.OncedulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telefono", DbType="VarChar(15)")]
		public string telefono
		{
			get
			{
				return this._telefono;
			}
			set
			{
				if ((this._telefono != value))
				{
					this.OntelefonoChanging(value);
					this.SendPropertyChanging();
					this._telefono = value;
					this.SendPropertyChanged("telefono");
					this.OntelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codigo", AutoSync=AutoSync.Always, DbType="VarChar(8)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string codigo
		{
			get
			{
				return this._codigo;
			}
			set
			{
				if ((this._codigo != value))
				{
					this.OncodigoChanging(value);
					this.SendPropertyChanging();
					this._codigo = value;
					this.SendPropertyChanged("codigo");
					this.OncodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permiso", DbType="VarChar(20)")]
		public string permiso
		{
			get
			{
				return this._permiso;
			}
			set
			{
				if ((this._permiso != value))
				{
					this.OnpermisoChanging(value);
					this.SendPropertyChanging();
					this._permiso = value;
					this.SendPropertyChanged("permiso");
					this.OnpermisoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rol", DbType="Int")]
		public System.Nullable<int> Rol
		{
			get
			{
				return this._Rol;
			}
			set
			{
				if ((this._Rol != value))
				{
					if (this._Rol1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRolChanging(value);
					this.SendPropertyChanging();
					this._Rol = value;
					this.SendPropertyChanged("Rol");
					this.OnRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Departamento", DbType="Int")]
		public System.Nullable<int> ID_Departamento
		{
			get
			{
				return this._ID_Departamento;
			}
			set
			{
				if ((this._ID_Departamento != value))
				{
					if (this._Departamento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DepartamentoChanging(value);
					this.SendPropertyChanging();
					this._ID_Departamento = value;
					this.SendPropertyChanged("ID_Departamento");
					this.OnID_DepartamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Admin", DbType="Int")]
		public System.Nullable<int> ID_Admin
		{
			get
			{
				return this._ID_Admin;
			}
			set
			{
				if ((this._ID_Admin != value))
				{
					if (this._Administrativo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AdminChanging(value);
					this.SendPropertyChanging();
					this._ID_Admin = value;
					this.SendPropertyChanged("ID_Admin");
					this.OnID_AdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Historico", Storage="_Historicos", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador")]
		public EntitySet<Historico> Historicos
		{
			get
			{
				return this._Historicos;
			}
			set
			{
				this._Historicos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Lote", Storage="_Lotes", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Referencia", Storage="_Referencias", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador")]
		public EntitySet<Referencia> Referencias
		{
			get
			{
				return this._Referencias;
			}
			set
			{
				this._Referencias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrativo_Trabajador", Storage="_Administrativo", ThisKey="ID_Admin", OtherKey="ID_Admin", IsForeignKey=true)]
		public Administrativo Administrativo
		{
			get
			{
				return this._Administrativo.Entity;
			}
			set
			{
				Administrativo previousValue = this._Administrativo.Entity;
				if (((previousValue != value) 
							|| (this._Administrativo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Administrativo.Entity = null;
						previousValue.Trabajadors.Remove(this);
					}
					this._Administrativo.Entity = value;
					if ((value != null))
					{
						value.Trabajadors.Add(this);
						this._ID_Admin = value.ID_Admin;
					}
					else
					{
						this._ID_Admin = default(Nullable<int>);
					}
					this.SendPropertyChanged("Administrativo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Trabajador", Storage="_Departamento", ThisKey="ID_Departamento", OtherKey="ID_Departamento", IsForeignKey=true)]
		public Departamento Departamento
		{
			get
			{
				return this._Departamento.Entity;
			}
			set
			{
				Departamento previousValue = this._Departamento.Entity;
				if (((previousValue != value) 
							|| (this._Departamento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departamento.Entity = null;
						previousValue.Trabajadors.Remove(this);
					}
					this._Departamento.Entity = value;
					if ((value != null))
					{
						value.Trabajadors.Add(this);
						this._ID_Departamento = value.ID_Departamento;
					}
					else
					{
						this._ID_Departamento = default(Nullable<int>);
					}
					this.SendPropertyChanged("Departamento");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_Trabajador", Storage="_Rol1", ThisKey="Rol", OtherKey="ID_Rol", IsForeignKey=true)]
		public Rol Rol1
		{
			get
			{
				return this._Rol1.Entity;
			}
			set
			{
				Rol previousValue = this._Rol1.Entity;
				if (((previousValue != value) 
							|| (this._Rol1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rol1.Entity = null;
						previousValue.Trabajadors.Remove(this);
					}
					this._Rol1.Entity = value;
					if ((value != null))
					{
						value.Trabajadors.Add(this);
						this._Rol = value.ID_Rol;
					}
					else
					{
						this._Rol = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rol1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Historicos(Historico entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = this;
		}
		
		private void detach_Historicos(Historico entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = null;
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = null;
		}
		
		private void attach_Referencias(Referencia entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = this;
		}
		
		private void detach_Referencias(Referencia entity)
		{
			this.SendPropertyChanging();
			entity.Trabajador = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Almacen")]
	public partial class Almacen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Almacen;
		
		private string _nombreAlmacen;
		
		private EntitySet<Area> _Areas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AlmacenChanging(int value);
    partial void OnID_AlmacenChanged();
    partial void OnnombreAlmacenChanging(string value);
    partial void OnnombreAlmacenChanged();
    #endregion
		
		public Almacen()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Almacen", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Almacen
		{
			get
			{
				return this._ID_Almacen;
			}
			set
			{
				if ((this._ID_Almacen != value))
				{
					this.OnID_AlmacenChanging(value);
					this.SendPropertyChanging();
					this._ID_Almacen = value;
					this.SendPropertyChanged("ID_Almacen");
					this.OnID_AlmacenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreAlmacen", DbType="VarChar(60)")]
		public string nombreAlmacen
		{
			get
			{
				return this._nombreAlmacen;
			}
			set
			{
				if ((this._nombreAlmacen != value))
				{
					this.OnnombreAlmacenChanging(value);
					this.SendPropertyChanging();
					this._nombreAlmacen = value;
					this.SendPropertyChanged("nombreAlmacen");
					this.OnnombreAlmacenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Almacen_Area", Storage="_Areas", ThisKey="ID_Almacen", OtherKey="ID_Almacen")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Almacen = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Almacen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Area;
		
		private string _nombreArea;
		
		private System.Nullable<int> _ID_Almacen;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Almacen> _Almacen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AreaChanging(int value);
    partial void OnID_AreaChanged();
    partial void OnnombreAreaChanging(string value);
    partial void OnnombreAreaChanged();
    partial void OnID_AlmacenChanging(System.Nullable<int> value);
    partial void OnID_AlmacenChanged();
    #endregion
		
		public Area()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Almacen = default(EntityRef<Almacen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Area", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Area
		{
			get
			{
				return this._ID_Area;
			}
			set
			{
				if ((this._ID_Area != value))
				{
					this.OnID_AreaChanging(value);
					this.SendPropertyChanging();
					this._ID_Area = value;
					this.SendPropertyChanged("ID_Area");
					this.OnID_AreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreArea", DbType="VarChar(50)")]
		public string nombreArea
		{
			get
			{
				return this._nombreArea;
			}
			set
			{
				if ((this._nombreArea != value))
				{
					this.OnnombreAreaChanging(value);
					this.SendPropertyChanging();
					this._nombreArea = value;
					this.SendPropertyChanged("nombreArea");
					this.OnnombreAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Almacen", DbType="Int")]
		public System.Nullable<int> ID_Almacen
		{
			get
			{
				return this._ID_Almacen;
			}
			set
			{
				if ((this._ID_Almacen != value))
				{
					if (this._Almacen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AlmacenChanging(value);
					this.SendPropertyChanging();
					this._ID_Almacen = value;
					this.SendPropertyChanged("ID_Almacen");
					this.OnID_AlmacenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Stock", Storage="_Stocks", ThisKey="ID_Area", OtherKey="ID_Area")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Almacen_Area", Storage="_Almacen", ThisKey="ID_Almacen", OtherKey="ID_Almacen", IsForeignKey=true)]
		public Almacen Almacen
		{
			get
			{
				return this._Almacen.Entity;
			}
			set
			{
				Almacen previousValue = this._Almacen.Entity;
				if (((previousValue != value) 
							|| (this._Almacen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Almacen.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._Almacen.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._ID_Almacen = value.ID_Almacen;
					}
					else
					{
						this._ID_Almacen = default(Nullable<int>);
					}
					this.SendPropertyChanged("Almacen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departamento")]
	public partial class Departamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Departamento;
		
		private string _nombreDep;
		
		private EntitySet<Trabajador> _Trabajadors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DepartamentoChanging(int value);
    partial void OnID_DepartamentoChanged();
    partial void OnnombreDepChanging(string value);
    partial void OnnombreDepChanged();
    #endregion
		
		public Departamento()
		{
			this._Trabajadors = new EntitySet<Trabajador>(new Action<Trabajador>(this.attach_Trabajadors), new Action<Trabajador>(this.detach_Trabajadors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Departamento", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Departamento
		{
			get
			{
				return this._ID_Departamento;
			}
			set
			{
				if ((this._ID_Departamento != value))
				{
					this.OnID_DepartamentoChanging(value);
					this.SendPropertyChanging();
					this._ID_Departamento = value;
					this.SendPropertyChanged("ID_Departamento");
					this.OnID_DepartamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreDep", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nombreDep
		{
			get
			{
				return this._nombreDep;
			}
			set
			{
				if ((this._nombreDep != value))
				{
					this.OnnombreDepChanging(value);
					this.SendPropertyChanging();
					this._nombreDep = value;
					this.SendPropertyChanged("nombreDep");
					this.OnnombreDepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Trabajador", Storage="_Trabajadors", ThisKey="ID_Departamento", OtherKey="ID_Departamento")]
		public EntitySet<Trabajador> Trabajadors
		{
			get
			{
				return this._Trabajadors;
			}
			set
			{
				this._Trabajadors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = this;
		}
		
		private void detach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetalleHist")]
	public partial class DetalleHist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_DetalleHist;
		
		private string _tabla;
		
		private string _CampoCambiado;
		
		private int _ID_Historico;
		
		private EntityRef<Historico> _Historico;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DetalleHistChanging(int value);
    partial void OnID_DetalleHistChanged();
    partial void OntablaChanging(string value);
    partial void OntablaChanged();
    partial void OnCampoCambiadoChanging(string value);
    partial void OnCampoCambiadoChanged();
    partial void OnID_HistoricoChanging(int value);
    partial void OnID_HistoricoChanged();
    #endregion
		
		public DetalleHist()
		{
			this._Historico = default(EntityRef<Historico>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_DetalleHist", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_DetalleHist
		{
			get
			{
				return this._ID_DetalleHist;
			}
			set
			{
				if ((this._ID_DetalleHist != value))
				{
					this.OnID_DetalleHistChanging(value);
					this.SendPropertyChanging();
					this._ID_DetalleHist = value;
					this.SendPropertyChanged("ID_DetalleHist");
					this.OnID_DetalleHistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tabla", DbType="VarChar(50)")]
		public string tabla
		{
			get
			{
				return this._tabla;
			}
			set
			{
				if ((this._tabla != value))
				{
					this.OntablaChanging(value);
					this.SendPropertyChanging();
					this._tabla = value;
					this.SendPropertyChanged("tabla");
					this.OntablaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampoCambiado", DbType="VarChar(50)")]
		public string CampoCambiado
		{
			get
			{
				return this._CampoCambiado;
			}
			set
			{
				if ((this._CampoCambiado != value))
				{
					this.OnCampoCambiadoChanging(value);
					this.SendPropertyChanging();
					this._CampoCambiado = value;
					this.SendPropertyChanged("CampoCambiado");
					this.OnCampoCambiadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Historico", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Historico
		{
			get
			{
				return this._ID_Historico;
			}
			set
			{
				if ((this._ID_Historico != value))
				{
					if (this._Historico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_HistoricoChanging(value);
					this.SendPropertyChanging();
					this._ID_Historico = value;
					this.SendPropertyChanged("ID_Historico");
					this.OnID_HistoricoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Historico_DetalleHist", Storage="_Historico", ThisKey="ID_Historico", OtherKey="ID_Historico", IsForeignKey=true)]
		public Historico Historico
		{
			get
			{
				return this._Historico.Entity;
			}
			set
			{
				Historico previousValue = this._Historico.Entity;
				if (((previousValue != value) 
							|| (this._Historico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Historico.Entity = null;
						previousValue.DetalleHists.Remove(this);
					}
					this._Historico.Entity = value;
					if ((value != null))
					{
						value.DetalleHists.Add(this);
						this._ID_Historico = value.ID_Historico;
					}
					else
					{
						this._ID_Historico = default(int);
					}
					this.SendPropertyChanged("Historico");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetalleReferencia")]
	public partial class DetalleReferencia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Detalle;
		
		private System.Nullable<int> _cantRoyo;
		
		private System.Nullable<double> _pesoRoyo;
		
		private string _descripcionDis;
		
		private string _fotoDesign;
		
		private System.Nullable<int> _ID_Referencia;
		
		private EntitySet<Lote> _Lotes;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Referencia> _Referencia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DetalleChanging(int value);
    partial void OnID_DetalleChanged();
    partial void OncantRoyoChanging(System.Nullable<int> value);
    partial void OncantRoyoChanged();
    partial void OnpesoRoyoChanging(System.Nullable<double> value);
    partial void OnpesoRoyoChanged();
    partial void OndescripcionDisChanging(string value);
    partial void OndescripcionDisChanged();
    partial void OnfotoDesignChanging(string value);
    partial void OnfotoDesignChanged();
    partial void OnID_ReferenciaChanging(System.Nullable<int> value);
    partial void OnID_ReferenciaChanged();
    #endregion
		
		public DetalleReferencia()
		{
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Referencia = default(EntityRef<Referencia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Detalle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Detalle
		{
			get
			{
				return this._ID_Detalle;
			}
			set
			{
				if ((this._ID_Detalle != value))
				{
					this.OnID_DetalleChanging(value);
					this.SendPropertyChanging();
					this._ID_Detalle = value;
					this.SendPropertyChanged("ID_Detalle");
					this.OnID_DetalleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cantRoyo", DbType="Int")]
		public System.Nullable<int> cantRoyo
		{
			get
			{
				return this._cantRoyo;
			}
			set
			{
				if ((this._cantRoyo != value))
				{
					this.OncantRoyoChanging(value);
					this.SendPropertyChanging();
					this._cantRoyo = value;
					this.SendPropertyChanged("cantRoyo");
					this.OncantRoyoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pesoRoyo", DbType="Float")]
		public System.Nullable<double> pesoRoyo
		{
			get
			{
				return this._pesoRoyo;
			}
			set
			{
				if ((this._pesoRoyo != value))
				{
					this.OnpesoRoyoChanging(value);
					this.SendPropertyChanging();
					this._pesoRoyo = value;
					this.SendPropertyChanged("pesoRoyo");
					this.OnpesoRoyoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descripcionDis", DbType="VarChar(200)")]
		public string descripcionDis
		{
			get
			{
				return this._descripcionDis;
			}
			set
			{
				if ((this._descripcionDis != value))
				{
					this.OndescripcionDisChanging(value);
					this.SendPropertyChanging();
					this._descripcionDis = value;
					this.SendPropertyChanged("descripcionDis");
					this.OndescripcionDisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fotoDesign", DbType="VarChar(500)")]
		public string fotoDesign
		{
			get
			{
				return this._fotoDesign;
			}
			set
			{
				if ((this._fotoDesign != value))
				{
					this.OnfotoDesignChanging(value);
					this.SendPropertyChanging();
					this._fotoDesign = value;
					this.SendPropertyChanged("fotoDesign");
					this.OnfotoDesignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Referencia", DbType="Int")]
		public System.Nullable<int> ID_Referencia
		{
			get
			{
				return this._ID_Referencia;
			}
			set
			{
				if ((this._ID_Referencia != value))
				{
					if (this._Referencia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ReferenciaChanging(value);
					this.SendPropertyChanging();
					this._ID_Referencia = value;
					this.SendPropertyChanged("ID_Referencia");
					this.OnID_ReferenciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetalleReferencia_Lote", Storage="_Lotes", ThisKey="ID_Detalle", OtherKey="ID_Detalle")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetalleReferencia_Stock", Storage="_Stocks", ThisKey="ID_Detalle", OtherKey="ID_Detalle")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referencia_DetalleReferencia", Storage="_Referencia", ThisKey="ID_Referencia", OtherKey="ID_Referencia", IsForeignKey=true)]
		public Referencia Referencia
		{
			get
			{
				return this._Referencia.Entity;
			}
			set
			{
				Referencia previousValue = this._Referencia.Entity;
				if (((previousValue != value) 
							|| (this._Referencia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referencia.Entity = null;
						previousValue.DetalleReferencias.Remove(this);
					}
					this._Referencia.Entity = value;
					if ((value != null))
					{
						value.DetalleReferencias.Add(this);
						this._ID_Referencia = value.ID_Referencia;
					}
					else
					{
						this._ID_Referencia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Referencia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.DetalleReferencia = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.DetalleReferencia = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.DetalleReferencia = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.DetalleReferencia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Historico")]
	public partial class Historico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Historico;
		
		private System.Nullable<System.DateTime> _fechaCreacion;
		
		private System.Nullable<int> _ID_Trabajador;
		
		private EntitySet<DetalleHist> _DetalleHists;
		
		private EntityRef<Trabajador> _Trabajador;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_HistoricoChanging(int value);
    partial void OnID_HistoricoChanged();
    partial void OnfechaCreacionChanging(System.Nullable<System.DateTime> value);
    partial void OnfechaCreacionChanged();
    partial void OnID_TrabajadorChanging(System.Nullable<int> value);
    partial void OnID_TrabajadorChanged();
    #endregion
		
		public Historico()
		{
			this._DetalleHists = new EntitySet<DetalleHist>(new Action<DetalleHist>(this.attach_DetalleHists), new Action<DetalleHist>(this.detach_DetalleHists));
			this._Trabajador = default(EntityRef<Trabajador>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Historico", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Historico
		{
			get
			{
				return this._ID_Historico;
			}
			set
			{
				if ((this._ID_Historico != value))
				{
					this.OnID_HistoricoChanging(value);
					this.SendPropertyChanging();
					this._ID_Historico = value;
					this.SendPropertyChanged("ID_Historico");
					this.OnID_HistoricoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fechaCreacion", DbType="DateTime")]
		public System.Nullable<System.DateTime> fechaCreacion
		{
			get
			{
				return this._fechaCreacion;
			}
			set
			{
				if ((this._fechaCreacion != value))
				{
					this.OnfechaCreacionChanging(value);
					this.SendPropertyChanging();
					this._fechaCreacion = value;
					this.SendPropertyChanged("fechaCreacion");
					this.OnfechaCreacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Trabajador", DbType="Int")]
		public System.Nullable<int> ID_Trabajador
		{
			get
			{
				return this._ID_Trabajador;
			}
			set
			{
				if ((this._ID_Trabajador != value))
				{
					if (this._Trabajador.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TrabajadorChanging(value);
					this.SendPropertyChanging();
					this._ID_Trabajador = value;
					this.SendPropertyChanged("ID_Trabajador");
					this.OnID_TrabajadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Historico_DetalleHist", Storage="_DetalleHists", ThisKey="ID_Historico", OtherKey="ID_Historico")]
		public EntitySet<DetalleHist> DetalleHists
		{
			get
			{
				return this._DetalleHists;
			}
			set
			{
				this._DetalleHists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Historico", Storage="_Trabajador", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador", IsForeignKey=true)]
		public Trabajador Trabajador
		{
			get
			{
				return this._Trabajador.Entity;
			}
			set
			{
				Trabajador previousValue = this._Trabajador.Entity;
				if (((previousValue != value) 
							|| (this._Trabajador.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajador.Entity = null;
						previousValue.Historicos.Remove(this);
					}
					this._Trabajador.Entity = value;
					if ((value != null))
					{
						value.Historicos.Add(this);
						this._ID_Trabajador = value.ID_Trabajador;
					}
					else
					{
						this._ID_Trabajador = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trabajador");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetalleHists(DetalleHist entity)
		{
			this.SendPropertyChanging();
			entity.Historico = this;
		}
		
		private void detach_DetalleHists(DetalleHist entity)
		{
			this.SendPropertyChanging();
			entity.Historico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lote")]
	public partial class Lote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Lote;
		
		private int _numLote;
		
		private int _cantLote;
		
		private System.Nullable<int> _ID_Detalle;
		
		private System.Nullable<int> _ID_Trabajador;
		
		private EntityRef<DetalleReferencia> _DetalleReferencia;
		
		private EntityRef<Trabajador> _Trabajador;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LoteChanging(int value);
    partial void OnID_LoteChanged();
    partial void OnnumLoteChanging(int value);
    partial void OnnumLoteChanged();
    partial void OncantLoteChanging(int value);
    partial void OncantLoteChanged();
    partial void OnID_DetalleChanging(System.Nullable<int> value);
    partial void OnID_DetalleChanged();
    partial void OnID_TrabajadorChanging(System.Nullable<int> value);
    partial void OnID_TrabajadorChanged();
    #endregion
		
		public Lote()
		{
			this._DetalleReferencia = default(EntityRef<DetalleReferencia>);
			this._Trabajador = default(EntityRef<Trabajador>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Lote", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Lote
		{
			get
			{
				return this._ID_Lote;
			}
			set
			{
				if ((this._ID_Lote != value))
				{
					this.OnID_LoteChanging(value);
					this.SendPropertyChanging();
					this._ID_Lote = value;
					this.SendPropertyChanged("ID_Lote");
					this.OnID_LoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numLote", DbType="Int NOT NULL")]
		public int numLote
		{
			get
			{
				return this._numLote;
			}
			set
			{
				if ((this._numLote != value))
				{
					this.OnnumLoteChanging(value);
					this.SendPropertyChanging();
					this._numLote = value;
					this.SendPropertyChanged("numLote");
					this.OnnumLoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cantLote", DbType="Int NOT NULL")]
		public int cantLote
		{
			get
			{
				return this._cantLote;
			}
			set
			{
				if ((this._cantLote != value))
				{
					this.OncantLoteChanging(value);
					this.SendPropertyChanging();
					this._cantLote = value;
					this.SendPropertyChanged("cantLote");
					this.OncantLoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Detalle", DbType="Int")]
		public System.Nullable<int> ID_Detalle
		{
			get
			{
				return this._ID_Detalle;
			}
			set
			{
				if ((this._ID_Detalle != value))
				{
					if (this._DetalleReferencia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DetalleChanging(value);
					this.SendPropertyChanging();
					this._ID_Detalle = value;
					this.SendPropertyChanged("ID_Detalle");
					this.OnID_DetalleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Trabajador", DbType="Int")]
		public System.Nullable<int> ID_Trabajador
		{
			get
			{
				return this._ID_Trabajador;
			}
			set
			{
				if ((this._ID_Trabajador != value))
				{
					if (this._Trabajador.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TrabajadorChanging(value);
					this.SendPropertyChanging();
					this._ID_Trabajador = value;
					this.SendPropertyChanged("ID_Trabajador");
					this.OnID_TrabajadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetalleReferencia_Lote", Storage="_DetalleReferencia", ThisKey="ID_Detalle", OtherKey="ID_Detalle", IsForeignKey=true)]
		public DetalleReferencia DetalleReferencia
		{
			get
			{
				return this._DetalleReferencia.Entity;
			}
			set
			{
				DetalleReferencia previousValue = this._DetalleReferencia.Entity;
				if (((previousValue != value) 
							|| (this._DetalleReferencia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetalleReferencia.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._DetalleReferencia.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._ID_Detalle = value.ID_Detalle;
					}
					else
					{
						this._ID_Detalle = default(Nullable<int>);
					}
					this.SendPropertyChanged("DetalleReferencia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Lote", Storage="_Trabajador", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador", IsForeignKey=true)]
		public Trabajador Trabajador
		{
			get
			{
				return this._Trabajador.Entity;
			}
			set
			{
				Trabajador previousValue = this._Trabajador.Entity;
				if (((previousValue != value) 
							|| (this._Trabajador.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajador.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Trabajador.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._ID_Trabajador = value.ID_Trabajador;
					}
					else
					{
						this._ID_Trabajador = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trabajador");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Referencia")]
	public partial class Referencia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Referencia;
		
		private string _referencia1;
		
		private System.Nullable<System.DateTime> _fechaAdquisicion;
		
		private System.Nullable<int> _ID_Trabajador;
		
		private EntitySet<DetalleReferencia> _DetalleReferencias;
		
		private EntityRef<Trabajador> _Trabajador;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ReferenciaChanging(int value);
    partial void OnID_ReferenciaChanged();
    partial void Onreferencia1Changing(string value);
    partial void Onreferencia1Changed();
    partial void OnfechaAdquisicionChanging(System.Nullable<System.DateTime> value);
    partial void OnfechaAdquisicionChanged();
    partial void OnID_TrabajadorChanging(System.Nullable<int> value);
    partial void OnID_TrabajadorChanged();
    #endregion
		
		public Referencia()
		{
			this._DetalleReferencias = new EntitySet<DetalleReferencia>(new Action<DetalleReferencia>(this.attach_DetalleReferencias), new Action<DetalleReferencia>(this.detach_DetalleReferencias));
			this._Trabajador = default(EntityRef<Trabajador>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Referencia", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Referencia
		{
			get
			{
				return this._ID_Referencia;
			}
			set
			{
				if ((this._ID_Referencia != value))
				{
					this.OnID_ReferenciaChanging(value);
					this.SendPropertyChanging();
					this._ID_Referencia = value;
					this.SendPropertyChanged("ID_Referencia");
					this.OnID_ReferenciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="referencia", Storage="_referencia1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string referencia1
		{
			get
			{
				return this._referencia1;
			}
			set
			{
				if ((this._referencia1 != value))
				{
					this.Onreferencia1Changing(value);
					this.SendPropertyChanging();
					this._referencia1 = value;
					this.SendPropertyChanged("referencia1");
					this.Onreferencia1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fechaAdquisicion", DbType="DateTime")]
		public System.Nullable<System.DateTime> fechaAdquisicion
		{
			get
			{
				return this._fechaAdquisicion;
			}
			set
			{
				if ((this._fechaAdquisicion != value))
				{
					this.OnfechaAdquisicionChanging(value);
					this.SendPropertyChanging();
					this._fechaAdquisicion = value;
					this.SendPropertyChanged("fechaAdquisicion");
					this.OnfechaAdquisicionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Trabajador", DbType="Int")]
		public System.Nullable<int> ID_Trabajador
		{
			get
			{
				return this._ID_Trabajador;
			}
			set
			{
				if ((this._ID_Trabajador != value))
				{
					if (this._Trabajador.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TrabajadorChanging(value);
					this.SendPropertyChanging();
					this._ID_Trabajador = value;
					this.SendPropertyChanged("ID_Trabajador");
					this.OnID_TrabajadorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referencia_DetalleReferencia", Storage="_DetalleReferencias", ThisKey="ID_Referencia", OtherKey="ID_Referencia")]
		public EntitySet<DetalleReferencia> DetalleReferencias
		{
			get
			{
				return this._DetalleReferencias;
			}
			set
			{
				this._DetalleReferencias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trabajador_Referencia", Storage="_Trabajador", ThisKey="ID_Trabajador", OtherKey="ID_Trabajador", IsForeignKey=true)]
		public Trabajador Trabajador
		{
			get
			{
				return this._Trabajador.Entity;
			}
			set
			{
				Trabajador previousValue = this._Trabajador.Entity;
				if (((previousValue != value) 
							|| (this._Trabajador.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trabajador.Entity = null;
						previousValue.Referencias.Remove(this);
					}
					this._Trabajador.Entity = value;
					if ((value != null))
					{
						value.Referencias.Add(this);
						this._ID_Trabajador = value.ID_Trabajador;
					}
					else
					{
						this._ID_Trabajador = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trabajador");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetalleReferencias(DetalleReferencia entity)
		{
			this.SendPropertyChanging();
			entity.Referencia = this;
		}
		
		private void detach_DetalleReferencias(DetalleReferencia entity)
		{
			this.SendPropertyChanging();
			entity.Referencia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rol")]
	public partial class Rol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Rol;
		
		private string _nombreRol;
		
		private EntitySet<Trabajador> _Trabajadors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RolChanging(int value);
    partial void OnID_RolChanged();
    partial void OnnombreRolChanging(string value);
    partial void OnnombreRolChanged();
    #endregion
		
		public Rol()
		{
			this._Trabajadors = new EntitySet<Trabajador>(new Action<Trabajador>(this.attach_Trabajadors), new Action<Trabajador>(this.detach_Trabajadors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Rol", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Rol
		{
			get
			{
				return this._ID_Rol;
			}
			set
			{
				if ((this._ID_Rol != value))
				{
					this.OnID_RolChanging(value);
					this.SendPropertyChanging();
					this._ID_Rol = value;
					this.SendPropertyChanged("ID_Rol");
					this.OnID_RolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreRol", DbType="VarChar(70)")]
		public string nombreRol
		{
			get
			{
				return this._nombreRol;
			}
			set
			{
				if ((this._nombreRol != value))
				{
					this.OnnombreRolChanging(value);
					this.SendPropertyChanging();
					this._nombreRol = value;
					this.SendPropertyChanged("nombreRol");
					this.OnnombreRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_Trabajador", Storage="_Trabajadors", ThisKey="ID_Rol", OtherKey="Rol")]
		public EntitySet<Trabajador> Trabajadors
		{
			get
			{
				return this._Trabajadors;
			}
			set
			{
				this._Trabajadors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Rol1 = this;
		}
		
		private void detach_Trabajadors(Trabajador entity)
		{
			this.SendPropertyChanging();
			entity.Rol1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Stock;
		
		private System.Nullable<int> _ID_Detalle;
		
		private System.Nullable<bool> _inStock;
		
		private System.Nullable<int> _ID_Area;
		
		private System.Nullable<int> _cantRoyo;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<DetalleReferencia> _DetalleReferencia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_StockChanging(int value);
    partial void OnID_StockChanged();
    partial void OnID_DetalleChanging(System.Nullable<int> value);
    partial void OnID_DetalleChanged();
    partial void OninStockChanging(System.Nullable<bool> value);
    partial void OninStockChanged();
    partial void OnID_AreaChanging(System.Nullable<int> value);
    partial void OnID_AreaChanged();
    partial void OncantRoyoChanging(System.Nullable<int> value);
    partial void OncantRoyoChanged();
    #endregion
		
		public Stock()
		{
			this._Area = default(EntityRef<Area>);
			this._DetalleReferencia = default(EntityRef<DetalleReferencia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Stock", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Stock
		{
			get
			{
				return this._ID_Stock;
			}
			set
			{
				if ((this._ID_Stock != value))
				{
					this.OnID_StockChanging(value);
					this.SendPropertyChanging();
					this._ID_Stock = value;
					this.SendPropertyChanged("ID_Stock");
					this.OnID_StockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Detalle", DbType="Int")]
		public System.Nullable<int> ID_Detalle
		{
			get
			{
				return this._ID_Detalle;
			}
			set
			{
				if ((this._ID_Detalle != value))
				{
					if (this._DetalleReferencia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DetalleChanging(value);
					this.SendPropertyChanging();
					this._ID_Detalle = value;
					this.SendPropertyChanged("ID_Detalle");
					this.OnID_DetalleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inStock", DbType="Bit")]
		public System.Nullable<bool> inStock
		{
			get
			{
				return this._inStock;
			}
			set
			{
				if ((this._inStock != value))
				{
					this.OninStockChanging(value);
					this.SendPropertyChanging();
					this._inStock = value;
					this.SendPropertyChanged("inStock");
					this.OninStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Area", DbType="Int")]
		public System.Nullable<int> ID_Area
		{
			get
			{
				return this._ID_Area;
			}
			set
			{
				if ((this._ID_Area != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AreaChanging(value);
					this.SendPropertyChanging();
					this._ID_Area = value;
					this.SendPropertyChanged("ID_Area");
					this.OnID_AreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cantRoyo", DbType="Int")]
		public System.Nullable<int> cantRoyo
		{
			get
			{
				return this._cantRoyo;
			}
			set
			{
				if ((this._cantRoyo != value))
				{
					this.OncantRoyoChanging(value);
					this.SendPropertyChanging();
					this._cantRoyo = value;
					this.SendPropertyChanged("cantRoyo");
					this.OncantRoyoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Stock", Storage="_Area", ThisKey="ID_Area", OtherKey="ID_Area", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._ID_Area = value.ID_Area;
					}
					else
					{
						this._ID_Area = default(Nullable<int>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetalleReferencia_Stock", Storage="_DetalleReferencia", ThisKey="ID_Detalle", OtherKey="ID_Detalle", IsForeignKey=true)]
		public DetalleReferencia DetalleReferencia
		{
			get
			{
				return this._DetalleReferencia.Entity;
			}
			set
			{
				DetalleReferencia previousValue = this._DetalleReferencia.Entity;
				if (((previousValue != value) 
							|| (this._DetalleReferencia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetalleReferencia.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._DetalleReferencia.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._ID_Detalle = value.ID_Detalle;
					}
					else
					{
						this._ID_Detalle = default(Nullable<int>);
					}
					this.SendPropertyChanged("DetalleReferencia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoAdmin")]
	public partial class TipoAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TipoAdmin;
		
		private string _tipo;
		
		private EntitySet<Administrativo> _Administrativos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TipoAdminChanging(int value);
    partial void OnID_TipoAdminChanged();
    partial void OntipoChanging(string value);
    partial void OntipoChanged();
    #endregion
		
		public TipoAdmin()
		{
			this._Administrativos = new EntitySet<Administrativo>(new Action<Administrativo>(this.attach_Administrativos), new Action<Administrativo>(this.detach_Administrativos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TipoAdmin", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_TipoAdmin
		{
			get
			{
				return this._ID_TipoAdmin;
			}
			set
			{
				if ((this._ID_TipoAdmin != value))
				{
					this.OnID_TipoAdminChanging(value);
					this.SendPropertyChanging();
					this._ID_TipoAdmin = value;
					this.SendPropertyChanged("ID_TipoAdmin");
					this.OnID_TipoAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tipo", DbType="VarChar(30)")]
		public string tipo
		{
			get
			{
				return this._tipo;
			}
			set
			{
				if ((this._tipo != value))
				{
					this.OntipoChanging(value);
					this.SendPropertyChanging();
					this._tipo = value;
					this.SendPropertyChanged("tipo");
					this.OntipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoAdmin_Administrativo", Storage="_Administrativos", ThisKey="ID_TipoAdmin", OtherKey="ID_TipoAdmin")]
		public EntitySet<Administrativo> Administrativos
		{
			get
			{
				return this._Administrativos;
			}
			set
			{
				this._Administrativos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Administrativos(Administrativo entity)
		{
			this.SendPropertyChanging();
			entity.TipoAdmin = this;
		}
		
		private void detach_Administrativos(Administrativo entity)
		{
			this.SendPropertyChanging();
			entity.TipoAdmin = null;
		}
	}
}
#pragma warning restore 1591
